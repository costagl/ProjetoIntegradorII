// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Model.Models;

#nullable disable

namespace Model.Migrations
{
    [DbContext(typeof(db_BuscaEmpregoContext))]
    partial class db_BuscaEmpregoContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Model.Models.Avaliacao", b =>
                {
                    b.Property<string>("id")
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .IsFixedLength();

                    b.Property<string>("CNPJ_Empresa")
                        .IsRequired()
                        .HasMaxLength(18)
                        .IsUnicode(false)
                        .HasColumnType("varchar(18)");

                    b.Property<string>("CPF_Candidato")
                        .IsRequired()
                        .HasMaxLength(14)
                        .IsUnicode(false)
                        .HasColumnType("varchar(14)");

                    b.Property<byte>("Classificacao")
                        .HasColumnType("tinyint");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(400)
                        .IsUnicode(false)
                        .HasColumnType("varchar(400)");

                    b.HasKey("id");

                    b.HasIndex("CNPJ_Empresa");

                    b.HasIndex("CPF_Candidato");

                    b.ToTable("Avaliacao");
                });

            modelBuilder.Entity("Model.Models.Candidato", b =>
                {
                    b.Property<string>("CPF")
                        .HasMaxLength(14)
                        .IsUnicode(false)
                        .HasColumnType("varchar(14)");

                    b.Property<DateOnly?>("DataNascimento")
                        .HasColumnType("date");

                    b.Property<string>("Endereco")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Telefone")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("CPF");

                    b.ToTable("Candidato");
                });

            modelBuilder.Entity("Model.Models.Candidatura", b =>
                {
                    b.Property<string>("CPF_Candidato")
                        .IsRequired()
                        .HasMaxLength(14)
                        .IsUnicode(false)
                        .HasColumnType("varchar(14)");

                    b.Property<string>("CartaApresetancao")
                        .HasMaxLength(400)
                        .IsUnicode(false)
                        .HasColumnType("varchar(400)");

                    b.Property<bool?>("Curriculo")
                        .HasColumnType("bit");

                    b.Property<DateOnly?>("DataCandidatura")
                        .HasColumnType("date");

                    b.Property<string>("Status")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<int>("idVaga")
                        .HasColumnType("int");

                    b.HasIndex("CPF_Candidato");

                    b.HasIndex("idVaga");

                    b.ToTable("Candidatura");
                });

            modelBuilder.Entity("Model.Models.Empresa", b =>
                {
                    b.Property<string>("CNPJ")
                        .HasMaxLength(18)
                        .IsUnicode(false)
                        .HasColumnType("varchar(18)");

                    b.Property<string>("Endereco")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("CNPJ");

                    b.ToTable("Empresa");
                });

            modelBuilder.Entity("Model.Models.Experiencia", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("CNPJ")
                        .IsRequired()
                        .HasMaxLength(14)
                        .IsUnicode(false)
                        .HasColumnType("varchar(14)");

                    b.Property<string>("CPF_Candidato")
                        .IsRequired()
                        .HasMaxLength(14)
                        .IsUnicode(false)
                        .HasColumnType("varchar(14)");

                    b.Property<string>("Cargo")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<DateOnly?>("DataFim")
                        .HasColumnType("date");

                    b.Property<DateOnly?>("DataInicio")
                        .HasColumnType("date");

                    b.Property<string>("Descricao")
                        .HasMaxLength(400)
                        .IsUnicode(false)
                        .HasColumnType("varchar(400)");

                    b.Property<string>("Empresa")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("id");

                    b.HasIndex("CPF_Candidato");

                    b.ToTable("Experiencia");
                });

            modelBuilder.Entity("Model.Models.Formacao", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("CPF_Candidato")
                        .IsRequired()
                        .HasMaxLength(14)
                        .IsUnicode(false)
                        .HasColumnType("varchar(14)");

                    b.Property<string>("Curso")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateOnly?>("DataFim")
                        .HasColumnType("date");

                    b.Property<DateOnly?>("DataInicio")
                        .HasColumnType("date");

                    b.Property<string>("Descricao")
                        .HasMaxLength(400)
                        .IsUnicode(false)
                        .HasColumnType("varchar(400)");

                    b.Property<string>("Instituicao")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("id");

                    b.HasIndex("CPF_Candidato");

                    b.ToTable("Formacao");
                });

            modelBuilder.Entity("Model.Models.Vaga", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("AreaAtuacao")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("CNPJ_Empresa")
                        .IsRequired()
                        .HasMaxLength(18)
                        .IsUnicode(false)
                        .HasColumnType("varchar(18)");

                    b.Property<DateOnly?>("DataFim")
                        .HasColumnType("date");

                    b.Property<DateOnly?>("DataInicio")
                        .HasColumnType("date");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(400)
                        .IsUnicode(false)
                        .HasColumnType("varchar(400)");

                    b.Property<string>("Localizacao")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Modelo")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Requisitos")
                        .HasMaxLength(400)
                        .IsUnicode(false)
                        .HasColumnType("varchar(400)");

                    b.Property<string>("TipoContrato")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("TituloVaga")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("id");

                    b.HasIndex("CNPJ_Empresa");

                    b.ToTable("Vaga");
                });

            modelBuilder.Entity("Model.Models.Avaliacao", b =>
                {
                    b.HasOne("Model.Models.Empresa", "CNPJ_EmpresaNavigation")
                        .WithMany("Avaliacao")
                        .HasForeignKey("CNPJ_Empresa")
                        .IsRequired()
                        .HasConstraintName("FK_Avaliacao_Empresa");

                    b.HasOne("Model.Models.Candidato", "CPF_CandidatoNavigation")
                        .WithMany("Avaliacao")
                        .HasForeignKey("CPF_Candidato")
                        .IsRequired()
                        .HasConstraintName("FK_Avaliacao_Candidato");

                    b.Navigation("CNPJ_EmpresaNavigation");

                    b.Navigation("CPF_CandidatoNavigation");
                });

            modelBuilder.Entity("Model.Models.Candidatura", b =>
                {
                    b.HasOne("Model.Models.Candidato", "CPF_CandidatoNavigation")
                        .WithMany()
                        .HasForeignKey("CPF_Candidato")
                        .IsRequired()
                        .HasConstraintName("FK_Candidatura_Candidato");

                    b.HasOne("Model.Models.Vaga", "idVagaNavigation")
                        .WithMany()
                        .HasForeignKey("idVaga")
                        .IsRequired()
                        .HasConstraintName("FK_Candidatura_Vaga");

                    b.Navigation("CPF_CandidatoNavigation");

                    b.Navigation("idVagaNavigation");
                });

            modelBuilder.Entity("Model.Models.Experiencia", b =>
                {
                    b.HasOne("Model.Models.Candidato", "CPF_CandidatoNavigation")
                        .WithMany("Experiencia")
                        .HasForeignKey("CPF_Candidato")
                        .IsRequired()
                        .HasConstraintName("FK_Experiencia_Candidato");

                    b.Navigation("CPF_CandidatoNavigation");
                });

            modelBuilder.Entity("Model.Models.Formacao", b =>
                {
                    b.HasOne("Model.Models.Candidato", "CPF_CandidatoNavigation")
                        .WithMany("Formacao")
                        .HasForeignKey("CPF_Candidato")
                        .IsRequired()
                        .HasConstraintName("FK_Formacao_Candidato");

                    b.Navigation("CPF_CandidatoNavigation");
                });

            modelBuilder.Entity("Model.Models.Vaga", b =>
                {
                    b.HasOne("Model.Models.Empresa", "CNPJ_EmpresaNavigation")
                        .WithMany("Vaga")
                        .HasForeignKey("CNPJ_Empresa")
                        .IsRequired()
                        .HasConstraintName("FK_Vaga_Empresa");

                    b.Navigation("CNPJ_EmpresaNavigation");
                });

            modelBuilder.Entity("Model.Models.Candidato", b =>
                {
                    b.Navigation("Avaliacao");

                    b.Navigation("Experiencia");

                    b.Navigation("Formacao");
                });

            modelBuilder.Entity("Model.Models.Empresa", b =>
                {
                    b.Navigation("Avaliacao");

                    b.Navigation("Vaga");
                });
#pragma warning restore 612, 618
        }
    }
}
